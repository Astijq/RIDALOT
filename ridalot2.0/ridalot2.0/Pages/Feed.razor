@page "/feed"
@using System.Collections
@using Data
@using ridalot2._0.Data.RIDALOT
@inherits LoginControl
@inject NavigationManager NavMan
@inject PageService pageService
@inject DBService DBservice

<h1>Feed</h1>
<input type="button" value="Filter" @onclick="()=> filter_popup = true" style="@Constants.button; float: right">
	<table class="table">
		<thead>
			<tr>
				<th>Date uploaded</th>
				<th>Image</th>
				<th>Description</th>
				<th>Measurements</th>
				<th>Estimated price (€)</th>
				<th>Lat</th>
				<th>Lng</th>
				<th>Take tasks</th>
			</tr>
		</thead>

		<Virtualize Context="post" Items="@pageService.posts">
			<tbody>
				<tr>
					<td>@post.Date</td>
				<td><img src="@pageService.getImages(post)" style="height:100px; max-width: 200px;" /></td>
					<td>@post.Description</td>
					<td>
						Weight: @post.Weight<br />
						Height: @post.Height<br />
						Width: @post.Width<br />
						Length: @post.Length<br />
					</td>
					<td>@post.Pay</td>
					<td>@post.AddressLat</td>
					<td>@post.AddressLng</td>
					<td><button type="submit" class="btn btn-info btn-sm" style=@Constants.button @onclick="(()=>Clicked(post))">Accept the task</button></td>
				</tr>
			</tbody>
		</Virtualize>
	</table>
@if(filter_popup)
{
	<Filter d="@filterDimensions"
		    OnClose="@(()=>filter_popup = false)"
			OnFilter="@Filter"
			OnRemove="@Remove">
	</Filter>
}
@if (popupTaskAccepted)
{
	<AdPopUp Title="Task"
		 Text="Task accepted succesfully!"
		 TextName="Name:"
		 TextAdress="Address:"
		 TextPhone="Phone:"
		 OnClose="@(()=>{popupTaskAccepted = false; NavMan.NavigateTo("/");})"
		 DialogType="AdPopUp.ModalDialogType.Ok">
	</AdPopUp>
}
@if (popupTaskNotAccepted)
{
	<AdPopUp Title="CAN'T TAKE THE TASK"
		 Text="YOU ARE NOT A WORKER"
		 OnClose="@(()=>popupTaskNotAccepted = false)">
	</AdPopUp>
}


@code {
	FilterDimensions filterDimensions = new FilterDimensions();
	public bool popupTaskAccepted { get; set; } = false;
	public bool popupTaskNotAccepted { get; set; } = false;
	public bool filter_popup { get; set; } = false;

	protected override async Task OnInitializedAsync()
	{
		try
		{
		  pageService.posts = await DBservice.GetFeedPostsAsync();
		}
		catch(Exception ex)
		{
			Console.WriteLine(ex.Message);
			ErrorLog.LogError(ex);
			throw new ArgumentException("Failed to load posts! Try again later!", ex);
		}
		try
		{
  		pageService.img = await DBservice.GetImagesAsync();
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex.Message);
			ErrorLog.LogError(ex);
			throw new ArgumentException("Failed to load image! Try again later!", ex);
		}
	}

	private async void Clicked(Posts post)
	{
		popupTaskAccepted = true;
		post.Worker = Email;
		post.Status = Status.InProgress;
		await DBservice.UpdatePostAsync(post);
		try
		{
		  pageService.posts = await DBservice.GetAllPostsAsync();
		}
		catch(Exception ex)
		{
			Console.WriteLine(ex.Message);
			ErrorLog.LogError(ex);
			throw new ArgumentException("Can't take the task right now! Try again later!", ex);
		}
	}

	private async Task Filter()
	{
		pageService.posts = await DBservice.GetAllPostsAsync();

		if(filterDimensions.weightTo != 0)
			pageService.posts = pageService.posts.Where(d => d.Weight >= filterDimensions.weightFrom
											&& d.Weight <= filterDimensions.weightTo).ToList();
		if (filterDimensions.heightTo != 0)
			pageService.posts = pageService.posts.Where(d => d.Height >= filterDimensions.heightFrom
											&& d.Height <= filterDimensions.heightTo).ToList();
		if (filterDimensions.widthTo != 0)
			pageService.posts = pageService.posts.Where(d => d.Width >= filterDimensions.widthFrom
											&& d.Width <= filterDimensions.widthTo).ToList();
		if (filterDimensions.lengthTo != 0)
			pageService.posts = pageService.posts.Where(d => d.Length >= filterDimensions.lengthFrom
											&& d.Length <= filterDimensions.lengthTo).ToList();

		filter_popup = false;
	}

	private async Task Remove()
	{
		filterDimensions.weightFrom = 0;
		filterDimensions.weightTo = 0;
		filterDimensions.heightFrom = 0;
		filterDimensions.heightTo = 0;
		filterDimensions.widthFrom = 0;
		filterDimensions.widthTo = 0;
		filterDimensions.lengthFrom = 0;
		filterDimensions.lengthTo = 0;
		pageService.posts = await DBservice.GetAllPostsAsync();
		filter_popup = false;
	}
}
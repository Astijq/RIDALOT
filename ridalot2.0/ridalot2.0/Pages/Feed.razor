@page "/feed"
@using System.Collections
@using Data
@using ridalot2._0.Data.RIDALOT
@using ridalot2._0.Pages.PageSupport
@inherits LoginControl
@inject NavigationManager NavMan
@inject PageService pageService
@inject DBService DBservice
@inject FilterDimensions filterDimensions

<h1>Feed</h1>
<input type="button" class="button" value="Filter" @onclick="()=> filter_popup = true" style="float: right">
		<div class="row">
			<Virtualize Context="post" Items="@pageService.posts">
				<div class="col-4 col-sm-3" style="padding: 20px">
						<Card Style="height: 350px; max-width: 300px;" >
							<CardImage Source="@pageService.getImages(post).First().ImagePath" Alt="Post's image" Style="height:150px; max-width: 300px;"></CardImage>
							<CardBody>
								<CardTitle Size="4"><b>@post.Description</b></CardTitle>
								<CardSubtitle Size="5">@post.Pay €</CardSubtitle>
								
								<CardText Style="font-size:14px">
									Height: @post.Height
									Width: @post.Width
									Length: @post.Length
									Weight: @post.Weight
								</CardText>
					<a href="/Post/@post.Id" class="stretched-link"></a>

							</CardBody>
							<CardFooter>
					<button type="submit" class="button" style="z-index: 2; position:relative;" @onclick="(()=>Clicked(post))">Accept the task</button>
							</CardFooter>
						</Card>
				</div>
			</Virtualize>
		</div>

@if(filter_popup)
{
	<Filter d="@filterDimensions"
		OnClose="@(()=>filter_popup = false)"
		OnFilter="@Filter"
		OnRemove="@Remove">
	</Filter>
}
@if (popupTaskAccepted)
{
	<AdPopUp Title="Task"
		 Text="Task accepted succesfully!"
		 TextName="Name:"
		 TextAdress="Address:"
		 TextPhone="Phone:"
		 OnClose="@(()=>{popupTaskAccepted = false; NavMan.NavigateTo("/");})"
		 DialogType="AdPopUp.ModalDialogType.Ok">
	</AdPopUp>
}
@if (popupTaskNotAccepted)
{
	<AdPopUp Title="CAN'T TAKE THE TASK"
		 Text="YOU ARE NOT A WORKER"
		 OnClose="@(()=>popupTaskNotAccepted = false)">
	</AdPopUp>
}


@code {
	public bool popupTaskAccepted { get; set; } = false;
	public bool popupTaskNotAccepted { get; set; } = false;
	public bool filter_popup { get; set; } = false;

	protected override async Task OnInitializedAsync()
	{
		try
		{
			pageService.posts = await DBservice.GetFeedPostsAsync();
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex.Message);
			ErrorLog.LogError(ex);
			throw new ArgumentException("Failed to load posts! Try again later!", ex);
		}
		try
		{
  		pageService.img = await DBservice.GetImagesAsync();
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex.Message);
			ErrorLog.LogError(ex);
			throw new ArgumentException("Failed to load image! Try again later!", ex);
		}
	}

	private async void Clicked(Posts post)
	{
		if (!DBservice.CheckIfWorker(Email))
		{
			popupTaskNotAccepted = true;
		}
		else
		{
			popupTaskAccepted = true;
			post.Worker = Email;
			post.Status = Status.InProgress;
			await DBservice.UpdatePostAsync(post);
			try
			{
				pageService.posts = await DBservice.GetAllPostsAsync();
			}
			catch (Exception ex)
			{
				Console.WriteLine(ex.Message);
				ErrorLog.LogError(ex);
				throw new ArgumentException("Can't take the task right now! Try again later!", ex);
			}
		}
	}

	private async Task Filter()
	{
		pageService.posts = await DBservice.GetAllPostsAsync();

		if (filterDimensions.weightTo != 0)
			pageService.posts = pageService.posts.Where(d => d.Weight >= filterDimensions.weightFrom
											&& d.Weight <= filterDimensions.weightTo).ToList();
		if (filterDimensions.heightTo != 0)
			pageService.posts = pageService.posts.Where(d => d.Height >= filterDimensions.heightFrom
											&& d.Height <= filterDimensions.heightTo).ToList();
		if (filterDimensions.widthTo != 0)
			pageService.posts = pageService.posts.Where(d => d.Width >= filterDimensions.widthFrom
											&& d.Width <= filterDimensions.widthTo).ToList();
		if (filterDimensions.lengthTo != 0)
			pageService.posts = pageService.posts.Where(d => d.Length >= filterDimensions.lengthFrom
											&& d.Length <= filterDimensions.lengthTo).ToList();

		filter_popup = false;
	}

	private async Task Remove()
	{
		filterDimensions.weightFrom = 0;
		filterDimensions.weightTo = 0;
		filterDimensions.heightFrom = 0;
		filterDimensions.heightTo = 0;
		filterDimensions.widthFrom = 0;
		filterDimensions.widthTo = 0;
		filterDimensions.lengthFrom = 0;
		filterDimensions.lengthTo = 0;
		pageService.posts = await DBservice.GetAllPostsAsync();
		filter_popup = false;
	}
}
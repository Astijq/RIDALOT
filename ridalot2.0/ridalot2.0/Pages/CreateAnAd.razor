@page "/createad"
@using Microsoft.Extensions.Logging
@using Pages
@using Data
@using Radzen
@using Radzen.Blazor
@using ridalot2._0.Data.RIDALOT
@using ridalot2._0.Pages.PageSupport
@inherits LoginControl
@inject NavigationManager NavMan
@inject DBService DBservice

@if (!User.Identity.IsAuthenticated)
{
	<a class="ml-md-auto btn btn-primary"
   href="/Identity/Login"
   target="_top">Login</a>
}
else
{ 
	<h3>Create an Ad</h3>

	<div>
		<InputFile OnChange="@OnFileSelection" multiple></InputFile>
		<div class="row">
			@foreach (string imgUrl in imgUrls)
			{
				<div class="container">
					<img src="@imgUrl" style="height:200px; max-width: 300px; transition: .5s ease; opacity: @imageOpacity"
				 @onmouseout="@OnMouseOut" @onmouseover="@OnMouseOver" />
					<div class="middle">
						<button class="btn btn-success" @onclick="() => imgUrls.Remove(imgUrl)" style="position:center; transition: .5s ease; opacity: @buttonOpacity "
						@onmouseout="@OnMouseOut" @onmouseover="@OnMouseOver">
							Delete
						</button>
					</div>
				</div>
			}
		</div>
	</div>

	<p>

		Description:
	</p>

	<p>
		<label>
			<textarea type="text" style=" min-width:500px; max-width:100%;min-height:50px;height:100%;width:100%;" @bind="description" />
		</label>
	</p>

	<p>
		<table>	
			<tr>
				<td align="right">Floor:</td>
				<td align="left"><input type="number" @bind="floor" @onblur="@CalculatePayment"/></td>
			</tr>
			<tr>
				<td align="right">Height (cm):</td>
				<td align="left"><input type="number" @bind="d.height" /></td>
			</tr>
			<tr>
				<td align="right">Width (cm):</td>
				<td align="left"><input type="number" @bind="d.width" /></td>
			</tr>
			<tr>
				<td align="right">Length (cm):</td>
				<td align="left"><input type="number" @bind="d.length" /></td>
			</tr>
			<tr>
				<td align="right">Weight (kg):</td>
				<td align="left"><input type="number" @bind="d.weight" /></td>
			</tr>
			<tr>
				<td align="right">Distance (km):</td>
				<td align="left"><input type="text" @bind="distance" /></td>
			</tr>
			<tr>
				<td align="right">Pay (€):</td>
				<td align="left"><input type="text" @bind="pay" /></td>
			</tr>
		</table>
	<p>This is a suggested price, making it lower reduces the chances of finding a courier</p>
		
	</p>
	<p>
		<table>
			<div class="row">
				<div class="col-xl-6">
					<h3>
					</h3>
					<RadzenGoogleMap style="height:600px;width:500px;" Zoom="@zoom" ApiKey="AIzaSyBZ4535dtJv01oQ5jTzBPOJkdz2WVtzOPY" Center="@(new GoogleMapPosition() { Lat = 55.260903771231035, Lng = 24.05798398437499 })" MapClick="@OnMapClick" MarkerClick="OnMarkerClick">
						<Markers>
							<RadzenGoogleMapMarker Title="Pick Up Location" Label="Pick Up Location" Position="@(new GoogleMapPosition() { Lat = lat, Lng = lng })"/>
						</Markers>
					</RadzenGoogleMap>

				</div>
			</div>

		</table>
	</p>


	<p>
		<button type="submit" class="btn btn-success" style=@Constants.button @onclick="@SavePost">Submit</button>
	</p>

}

@if (popupPostedSuccessfully)
{
	<AdPopUp Title="Posted"
		 Text="Ad posted succesfully!"
		 OnClose="@(()=>{popupPostedSuccessfully = false; NavMan.NavigateTo("/");})"
		 DialogType="AdPopUp.ModalDialogType.Ok">
	</AdPopUp>
}
@if (popupNotPosted)
{
	<AdPopUp Title="Not posted"
		 Text="Ad was not posted due to unforseen issue"
		 OnClose="@(()=>popupNotPosted = false)"
		 DialogType="AdPopUp.ModalDialogType.Ok">
	</AdPopUp>
}

@code {
	int zoom = 7;
	string clickedPosition = "";
	double lat;
	double lng;
	public delegate double MyDelegate<T>(T distance, int floor);
	MyDelegate<double> del = Payment.CalculatePay;

	void OnMapClick(GoogleMapClickEventArgs args)
	{
		clickedPosition = $"Map clicked LAT : {args.Position.Lat}, LNG : {args.Position.Lng}";
		lat = args.Position.Lat;
		lng = args.Position.Lng;
		distance = DistanceFrom.GetDistance(lat, lng, 54.69110901324764, 25.466429088366166);
		CalculatePayment();

	}
	void OnMarkerClick(RadzenGoogleMapMarker args)
	{
		clickedPosition = $"Map {args.Title} Clicked LAT : {args.Position.Lat}, LNG : {args.Position.Lng}";
	}

	private Dimensions d;

	private double? pay { get; set; }
	public double distance { get; set; }
	private int floor { get; set; }
	private String description = "write here";
	private List<string> imgUrls = new List<string>();

	private bool popupPostedSuccessfully { get; set; } = false;
	private bool popupNotPosted { get; set; } = false;
	private bool isHovering { get; set; } = false;
	private double imageOpacity { get; set; } = 1;
	private double buttonOpacity { get; set; } = 0;

	protected override void OnInitialized()
	{
		base.OnInitialized();

	}
	public void CalculatePayment()
	{
		try
		{
			pay = del(distance, floor);
		}
		catch(System.Exception ex)
		{
			Console.WriteLine(ex.Message);
			ErrorLog.LogError(ex);
			throw new ArgumentException("Failed to load posts! Try again later!", ex);
		}
	}
	public void CalculateDistance()
	{
		distance = DistanceFrom.GetDistance(lat, lng, 54.69110901324764, 25.466429088366166);
		Console.WriteLine(distance);
	}

	private async Task OnFileSelection(InputFileChangeEventArgs e)
	{
		foreach (IBrowserFile imgFile in e.GetMultipleFiles(5))
		{
			var buffers = new byte[imgFile.Size];
			await imgFile.OpenReadStream().ReadAsync(buffers);
			string imageType = imgFile.ContentType;
			string imgUrl = $"data:{imageType};base64,{Convert.ToBase64String(buffers)}";
			imgUrls.Add(imgUrl);
		}
	}
	[Intercept]
	private void SavePost()
	{
		var newPost = new Posts();
		newPost.Date = System.DateTime.Now.ToUniversalTime();
		newPost.Status = Status.Waiting;
		newPost.User = Email;
		newPost.Description = description;
		newPost.Height = d.height;
		newPost.Width = d.width;
		newPost.Length = d.length;
		newPost.Weight = d.weight;
		newPost.AddressLat = lat;
		newPost.AddressLng = lng;
		newPost.Floor = floor;
		newPost.Pay = pay;
		newPost.Worker = null;
		newPost.Distance = distance;
		//double Distance = DistanceFrom.GetDistance(lat, lng, 54.69110901324764, 25.466429088366166)/1000;
		

		
			
				var result = DBservice.CreatePostAsync(newPost);
			
		
			foreach (string image in imgUrls)
			{
				var img = new Images();
				img.ImagePath = image;
				img.Posts = newPost;
				try
				{
					var result2 = DBservice.CreateImageAsync(img);
				}
				catch(Exception ex)
				{
					Console.WriteLine(ex.Message);
					ErrorLog.LogError(ex);
					throw new ArgumentException("Failed to load your image! Try again later!", ex);
				}
			}
		  popupPostedSuccessfully = true;
	  }

	private void OnMouseOver(MouseEventArgs mouseEvent)
	{
		if (!isHovering)
		{
			isHovering = true;
			imageOpacity = 0.3;
			buttonOpacity = 0.7;
		}
	}

	private void OnMouseOut(MouseEventArgs mouseEvent)
	{
		imageOpacity = 1;
		buttonOpacity = 0;
		isHovering = false;
	}
}
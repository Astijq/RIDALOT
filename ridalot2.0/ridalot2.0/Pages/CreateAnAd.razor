@page "/createad"
@using Microsoft.Extensions.Logging
@using Pages
@using Data
@using ridalot2._0.Data.RIDALOT
@inherits LoginControl
@inject NavigationManager NavMan

@if (!@c.User.Identity.IsAuthenticated)
{
	<a class="ml-md-auto btn btn-primary"
   href="/Identity/Login"
   target="_top">Login</a>
}
else
{
	<h3>Create an Ad</h3>
	<style>
		.container {
			position: relative;
			width: fit-content;
			height: 200px
		}

		.middle {
			transition: .5s ease;
			opacity: 0;
			position: absolute;
			top: 50%;
			left: 50%;
			transform: translate(-50%, -50%);
			-ms-transform: translate(-50%, -50%);
			text-align: center;
		}

		.container:hover .image {
			opacity: 0.3;
		}

		.container:hover .middle {
			opacity: 1;
		}
	</style>

	<div>
		<InputFile OnChange="@OnFileSelection" multiple></InputFile>
		<div class="row">
			@foreach (string imgUrl in imgUrls)
			{
				<div class="container">
					<img src="@imgUrl" style="height:200px; max-width: 300px; transition: .5s ease; opacity: @op"
				 @onmouseout="@OnMouseOut" @onmouseover="@OnMouseOver" />
					<div class="middle">
						<button class="btn btn-success" @onclick="() => DeletePhoto(imgUrl)" style="position:center; transition: .5s ease; opacity: @opButton "
						@onmouseout="@OnMouseOut" @onmouseover="@OnMouseOver">
							Delete
						</button>
					</div>
				</div>
			}
		</div>
	</div>

	<p>

		Description:
	</p>

	<p>
		<label>
			<textarea type="text" style=" min-width:500px; max-width:100%;min-height:50px;height:100%;width:100%;" @bind="description" />
		</label>
	</p>

	<p>
		<table>
			<tr>
				<td align="right">Floor:</td>
				<td align="left"><input type="number" @bind="floor" onblur="@CalculatePay"/></td>
			</tr>
			<tr>
				<td align="right">Height (cm):</td>
				<td align="left"><input type="number" @bind="d.height" /></td>
			</tr>
			<tr>
				<td align="right">Width (cm):</td>
				<td align="left"><input type="number" @bind="d.width" /></td>
			</tr>
			<tr>
				<td align="right">Length (cm):</td>
				<td align="left"><input type="number" @bind="d.length" /></td>
			</tr>
			<tr>
				<td align="right">Weight (kg):</td>
				<td align="left"><input type="number" @bind="d.weight" /></td>
			</tr>
			<tr>
				<td align="right">Pay (€):</td>
				<td align="left"><input type="text" @bind="pay" /></td>
			</tr
		</table>
		<p>This is a suggested price, making it lower reduces the chances of finding a courier</p>
	</p>
	<p>
		<table>
			<div class="row">
				<div class="col-xl-6">
					<h3>
					</h3>
					<RadzenGoogleMap style="height:600px;width:500px;" Zoom="@zoom" Center="@(new GoogleMapPosition() { Lat = 55.260903771231035, Lng = 24.05798398437499 })" MapClick="@OnMapClick" MarkerClick="OnMarkerClick">
						<Markers>
							<RadzenGoogleMapMarker Title="Pick Up Location" Label="Pick Up Location" Position="@(new GoogleMapPosition() { Lat = lat, Lng = lng })" />
						</Markers>
					</RadzenGoogleMap>

				</div>
			</div>

		</table>
		<p>This is a suggested price, making it lower reduces the chances of finding a courier</p>
	</p>


	<p>
		<button type="submit" class="btn btn-success" style=@Constants.button onclick="@Clicked">Submit</button>
	</p>

}

@if (popup)
{
	<AdPopUp Title="Posted"
		 Text="Ad posted succesfully!"
		 OnClose="@ClosePopup"
		 DialogType="AdPopUp.ModalDialogType.Ok">
	</AdPopUp>
}
@if (popup2)
{
	<AdPopUp Title="Not posted"
		 Text="Address isn't correct"
		 OnClose="@FixPopup"
		 DialogType="AdPopUp.ModalDialogType.Ok">
	</AdPopUp>
}

@code {
	int zoom = 7;
	string clickedPosition = "";
	double lat;
	double lng;

	void OnMapClick(GoogleMapClickEventArgs args)
	{
		clickedPosition = $"Map clicked LAT : {args.Position.Lat}, LNG : {args.Position.Lng}";
		lat = args.Position.Lat;
		lng = args.Position.Lng;

	}
	void OnMarkerClick(RadzenGoogleMapMarker args)
	{
		clickedPosition = $"Map {args.Title} Clicked LAT : {args.Position.Lat}, LNG : {args.Position.Lng}";
	}

	public struct Dimensions
	{
		public int height { get; set; }
		public int width { get; set; }
		public int length { get; set; }
		public int weight { get; set; }
	}
	Dimensions d;

	public double pay { get; set; }
	public int floor { get; set; }
	public String description = "write here";
	public String address = "Street-name 000";
	public String file = "PostInfo.json";
	public List<string> imgUrls = new List<string>();
	public bool popup { get; set; } = false;
	public bool popup2 { get; set; } = false;
	public bool isHovering { get; set; } = false;
	public double op { get; set; } = 1;
	public double opButton { get; set; } = 0;

	protected override void OnInitialized()
	{
		base.OnInitialized();
		CalculatePay();
	}
	public void CalculatePay()
	{
		Payment p = new Payment();
		pay = Math.Round(p.CalculatePay(10.1f, floor), 1);
		StateHasChanged();
	}

	private async Task OnFileSelection(InputFileChangeEventArgs e)
	{
		foreach (IBrowserFile imgFile in e.GetMultipleFiles(5))
		{
			var buffers = new byte[imgFile.Size];
			await imgFile.OpenReadStream().ReadAsync(buffers);
			string imageType = imgFile.ContentType;
			string imgUrl = $"data:{imageType};base64,{Convert.ToBase64String(buffers)}";
			imgUrls.Add(imgUrl);
		}
	}

	public static bool isValidAddress(string add)
	{
		if (add.addressMatch())
			return (true);
		else
			return (false);
	}

	private void Clicked()
	{
		if (isValidAddress(address))
		{
			var newPost = new Posts();
			newPost.Date = System.DateTime.Now.ToUniversalTime();
			newPost.Status = Convert.ToInt32(Status.Waiting);
			newPost.User = c.Email;
			newPost.Description = description;
			newPost.Height = d.height;
			newPost.Width = d.width;
			newPost.Length = d.length;
			newPost.Weight = d.weight;
			newPost.AddressLat = lat;
			newPost.AddressLng = lng;
			newPost.Floor = floor;
			newPost.Pay = pay;
			newPost.Worker = null;
			// Save the result
			var result =
			@Service.CreatePostAsync(newPost);

			foreach (string image in imgUrls)
			{
				var img = new Images();
				img.ImagePath = image;
				img.Posts = newPost;
				var result2 = @Service.CreateImageAsync(img);
			}
			popup = true;
		}
		else popup2 = true;
	}

	private async Task ClosePopup()
	{
		popup = false;
		StateHasChanged();
		NavMan.NavigateTo("/");
	}

	private async Task FixPopup()
	{
		popup2 = false;
		StateHasChanged();
	}

	protected void OnMouseOver(MouseEventArgs mouseEvent)
	{
		if (!isHovering)
		{
			isHovering = true;
			op = 0.3;
			opButton = 0.7;
			StateHasChanged();
		}
	}

	protected void OnMouseOut(MouseEventArgs mouseEvent)
	{
		op = 1;
		opButton = 0;
		isHovering = false;
		StateHasChanged();
	}
	public void DeletePhoto(string imgUrl)
	{
		for (int i = 0; i < imgUrls.Count; i++)
		{
			if (imgUrls[i] == imgUrl)
			{
				imgUrls.RemoveAt(i);
			}
		}
	}
}
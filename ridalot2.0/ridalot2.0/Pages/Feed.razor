@page "/feed"
@using System.Collections
@using Data
@using ridalot2._0.Data.RIDALOT
@inherits LoginControl
@inject NavigationManager NavMan
@inject PageService pageService
@inject DBService DBservice

<h1>Feed</h1>
<input type="button" value="Filter" @onclick="()=> filter_popup = true" style="@Constants.button; float: right">
	<table class="table">
		<thead>
			<tr>
				<th>Date uploaded</th>
				<th>Image</th>
				<th>Description</th>
				<th>Measurements</th>
				<th>Estimated price (€)</th>
				<th>Address</th>
				<th>Take tasks</th>
			</tr>
		</thead>

		<Virtualize Context="post" Items="@pageService.posts">
			<tbody>
				<tr>
					<td>@post.Date</td>
				<td><img src="@pageService.getImages(post)" style="height:100px; max-width: 200px;" /></td>
					<td>@post.Description</td>
					<td>
						Weight: @post.Weight<br />
						Height: @post.Height<br />
						Width: @post.Width<br />
						Length: @post.Length<br />
					</td>
					<td>@post.Pay</td>
					<td>@post.AddressLat @post.AddressLng</td>
					<td><button type="submit" class="btn btn-info btn-sm" style=@Constants.button @onclick="(()=>Clicked(post))">Accept the task</button></td>
				</tr>
			</tbody>
		</Virtualize>
	</table>
@if(filter_popup)
{
	<div class="modal fade show" id="myModal" style="display:block; background-color: rgba(10,10,10,.8);" aria-modal="true" role="dialog">
		<div class="modal-dialog">
			<div class="modal-content">
				<div class="modal-header">
					<h4 class="modal-title">Filter</h4>
					<button type="button" class="close" @onclick="@Cancel">&times;</button>
				</div>
				<div class="modal-body">
					<table>
						<tr>
							<td colspan="2">Weight:</td>
						</tr>
						<tr>
							<td align="right"><input type="number" alt="from" @bind="weightFrom" /></td>
							<td align="left"><input type="number" alt="to" @bind="weightTo" /></td>
						</tr>
						<tr>
							<td colspan="2">Height:</td>
						</tr>
						<tr>
							<td align="right"><input type="number" alt="from" @bind="heightFrom" /></td>
							<td align="left"><input type="number" alt="to" @bind="heightTo" /></td>
						</tr>
						<tr>
							<td colspan="2">Width:</td>
						</tr>
						<tr>
							<td align="right"><input type="number" alt="from" @bind="widthFrom" /></td>
							<td align="left"><input type="number" alt="to" @bind="widthTo" /></td>
						</tr>
						<tr>
							<td colspan="2">Length:</td>
						</tr>
						<tr>
							<td align="right"><input type="number" alt="from" @bind="lengthFrom" /></td>
							<td align="left"><input type="number" alt="to" @bind="lengthTo" /></td>
						</tr>
					</table>
				</div>
				<div class="modal-footer">
					<button type="button" class="btn" @onclick="@Cancel">Cancel</button>
					<button type="button" class="btn btn-primary" @onclick=@Filter>OK</button>
					<button type="button" class="btn" style="background-color: Black; color: white;" @onclick=@Remove>Remove</button>
				</div>
			</div>
		</div>
	</div>
}
@if (popup)
{
	<AdPopUp Title="Task"
		 Text="Task accepted succesfully!"
		 TextName="Name:"
		 TextAdress="Address:"
		 TextPhone="Phone:"
		 OnClose="@ClosePopup"
		 DialogType="AdPopUp.ModalDialogType.Ok">
	</AdPopUp>
}
@if (popup1)
{
	<AdPopUp Title="CAN'T TAKE THE TASK"
		 Text="YOU ARE NOT A WORKER"
		 OnClose="@ClosePopup">
	</AdPopUp>
}


@code {
	public bool popup { get; set; } = false;
	public bool popup1 { get; set; } = false;
	public bool filter_popup { get; set; } = false;

	protected override async Task OnInitializedAsync()
	{
		pageService.posts = await DBservice.GetFeedPostsAsync();
		pageService.img = await DBservice.GetImagesAsync();
	}

	async Task Clicked(Posts post)
	{
		popup = true;
		post.Worker = Email;
		post.Status = Convert.ToInt32(Status.InProgress);
		await DBservice.UpdatePostAsync(post);

		pageService.posts = await DBservice.GetAllPostsAsync();
	}
	public int weightFrom = 0, weightTo = 0, heightFrom = 0, heightTo = 0;
	public int widthFrom = 0, widthTo = 0, lengthFrom = 0, lengthTo = 0;

	async Task Filter(){
		pageService.posts = await DBservice.GetAllPostsAsync();

		if(weightTo != 0)
			pageService.posts = pageService.posts.Where(d => d.Weight >= weightFrom
											&& d.Weight <= weightTo).ToList();
		if(heightTo != 0)
			pageService.posts = pageService.posts.Where(d => d.Height >= heightFrom
											&& d.Height <= heightTo).ToList();
		if (widthTo != 0)
			pageService.posts = pageService.posts.Where(d => d.Width >= widthFrom
											&& d.Width <= widthTo).ToList();
		if (lengthTo != 0)
			pageService.posts = pageService.posts.Where(d => d.Length >= lengthFrom
											&& d.Length <= lengthTo).ToList();

		filter_popup = false;
	}

	private async Task ClosePopup(bool accepted)
	{
		popup = false;
		popup1 = false;
		StateHasChanged();
		NavMan.NavigateTo("/");
	}

	async Task Remove()
	{
		weightFrom = 0;
		weightTo = 0;
		heightFrom = 0;
		heightTo = 0;
		widthFrom = 0;
		widthTo = 0;
		lengthFrom = 0;
		lengthTo = 0;
		pageService.posts = await DBservice.GetAllPostsAsync();
		filter_popup = false;
	}
	async Task Cancel()
	{
		filter_popup = false;
	}
}